[step06_JSP]
1. Java Server Page
2. 용도
	- 자바 데이터를 브라우저 화면에 출력할 수 있게 제시된 스펙
3. 특징
	1. 확장자 : *.jsp
	2. 위치 : html과 동일한 경로
	3. jsp를 최초로 호출할 경우 web server가 servlet으로 자동 변환 
		-> 컴파일 -> 서버 배치 -> 서비스 
		: 개발은 쉬우나 에러 발생시 변환된 servlet의 에러 메세지가 보이기 때문에 에러 처리가 어렵다
	4. 정해진 tag들로 개발
	5. 이미 자동 생성되는 내장 객체들 존재
		- 요청 객체, 세션 객체, 출력 객체, 응답 객체...
		- 개발자 코드는 참조 변수로만 사용하는 코드로 개발
	6. 내장 객체 참조 변수와 타입
		1. out - Printwriter
		2. request - HttpServletRequest
		3. session - HttpSession [쿠키 내장객체 아님]
		4. pageContext - this
		...
	
4. tag 종류
	*가급적 자바 코드는 최소화
	1. jsp scripting - 5가지 뿐
		1. page 지시자
			<%@ page%>
			- 외부 library import
			- client에게 응답하는 인코딩, mime type 설정
			- 세션을 사용 안하고자 할 경우 설정
			..
			- jsp 선언구에 설정 권장
			
		2. <%! %>	선언자
			- servlet이라 가정한 상태에서 멤버변수와 메소드 구현시 사용하는 tag
			- servlet 객체는 하나로 모든 user에게 공유
			
		3. <%-- --%>
			- jsp만의 주석
			- client 브라우저에 전송 불가
			- 보안을 고려한 주석 내용 작성 권장
			
		4. <%= %> : expression, 출력 tag
			- 브라우저에 출력
			- doGet/doPost/doService() body 부분에 자동 적용
			- 주의사항 : 세미콜론 작성 불가	
			
		5. <% %> : scriptlet
			- 순수 자바 코드 제한없이 개발 가능
			- doGet/doPost/doService() body 부분에 자동 적용
			- 이 tag가 많을 수록 jsp 품질 저하
			- jsp 자체의 내장 객체들을 이 tag 내부에서도 사용 가능
			
	2. jsp action tag
	3. EL
		- 사용 빈도가 굉장히 높음
		- Expression Language
		- 문법 : ${출력로직}
		- 연산 가능
		- * 자바 데이터 출력이 가능한 tag
			*** 요청 또는 세션 객체에 저장된 데이터에 한해서만 출력
			단, 현 jsp에서만 EL을 통해 출력을 위해선 해당 jsp를 의미하는 page에 저장후 사용
		- 장점
			- 이미 저장되어 있는 쿠키 정보 출력이 굉장히 간결
			- 문법
			1. 쿠키 사용 문법
				${cookie.개발자가 설정한 key.value}
			2. getParameter()와 출력 로직이 혼용된 간결한 문법
				${param.웹쿼리stringkey}
	4. JSTL
		* https://tomcat.apache.org/download-taglibs.cgi
		- 반복, 조건 로직 등을 tag로 구현 가능한 알고리즘이 적용된 tag
		- 업계에서 기증된 무상 library[tag]
		- jstl library를 개발 및 실행 환경에 셋팅
			: RDBMS 사용시 db driver 셋팅과 같은 맥락
			